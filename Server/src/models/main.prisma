generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Admin
  Seller
  Buyer
}

enum Status_payment {
  Pending
  Success
  Failed
  Refund_Pending
  Refund_Success
}

enum Status_Order {
  Pending
  Accepted 
  Declined
}

enum Status_Pickup {
  Cooking 
  Ready
  Picked_Up
}

enum Location {
  Kantin_Payung
  Kantin_Basement
  Kantin_Lt5
}

enum Status_Open { 
  Open
  Close
}


enum Bank_Account { 
  BCA
  BNI
  Mandiri
  BRI
  CIMB
  Permata
  Danamon
  Maybank
  Panin
  OCBC
  HSBC
  UOB
  Citibank
}

enum Status_Request { 
  Pending
  Accepted
  Declined
}

enum Status_Avaibility { 
  Available
  Not_Available
}

model User {
  id String @id @default(uuid())
  email String? @unique
  password String
  role Role
  photo String?
  phone String? @unique


  // HasOne 
  vendor Vendor?
  buyer Buyer?
  admin Admin?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}


model Admin {
  id String @id @default(uuid())
  name String
  binusian_id String @unique

  // FK ke User (BelongsTo User)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Buyer{
  id String @id @default(uuid())
  first_name String
  last_name String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  // HasMany Order
  order Order[]

  // HasMany FavoriteBuyer
  favoriteBuyer FavoriteBuyer[]


  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Vendor {
  id String @id @default(uuid())
  name String 
  location Location 
  rating Float
  open_hour String
  close_hour String
  status Status_Open @default(Open)
  bank_account String
  bank_type Bank_Account 
  delivery_status Boolean @default(true)
  vendor_name String
  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  
   // HasMany Menu (one Shop, Many menu)
  menu Menu[]

  // HasMany Transaction (one Shop, Many Transaction)
  transaction Transaction[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}



model Menu{
  id String @id @default(uuid())
  name String
  description String
  photo String
  status Status_Avaibility @default(Available)
  isArchived Boolean @default(false)

  // BelongsTo Shop
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId String


  // BelongsTo Category
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  // HasMany FavoriteBuyer
  favoriteBuyer FavoriteBuyer[]

  // HasMany MenuVariant
  menuVariants MenuVariant[]

}


model MenuVariant {
  id String @id @default(uuid())
  name String 
  price Int
  stock Int

  // BelongsTo Menu
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId String

  // HasMany OrderItem
  orderItem OrderItem[]

  @@unique([menuId, name])
}

model Category{
  id String @id @default(uuid())
  name String
  photo String

  // HasMany Food
  menu Menu[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}


model Order{
  id String @id @default(uuid()) @unique
  total_menu Int
  total_price Int
  status Status_Order @default(Pending)
  delivery_status Boolean @default(false)
  status_pickup Status_Pickup @default(Cooking)
  midtransPaymentUrl String? @unique

  // BelongsTo User
  buyer Buyer @relation(fields: [buyerId], references: [id],  onUpdate: Cascade)
  buyerId String

  // HasMany OrderItem
  orderItem OrderItem[]

  // HasOne Transaction 
  transaction Transaction?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  updateAcceptedAt DateTime? 
  updateReadyAt DateTime? 
  updatePickedUpAt DateTime? 
}

model OrderItem { 
  id String @id @default(uuid())
  quantity Int
  subtotalPerMenu Int
  pricePerMenu Int

  // BelongsTo Order
  order Order @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  orderId String

  // BelongsTo MenuVariant
  menuVariant MenuVariant @relation(fields: [menuVariantId], references: [id], onUpdate: Cascade)
  menuVariantId String

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Transaction {
  id String @id @default(uuid())
  status_payment Status_payment @default(Pending)
  total_price Int

  // BelongsTo Order
  order Order @relation(fields: [orderId], references: [id], onUpdate: Cascade)
  orderId String @unique

  // BelongsTo Vendor
  vendor Vendor @relation(fields: [vendorId], references: [id], onUpdate: Cascade)
  vendorId String 

  // HasOne Review
  review Review? 

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())
  rating Int
  description String

  applicationReview String?

  // BelongsTo Transaction 
  transaction Transaction @relation(fields: [transactionId], references: [id], onUpdate: Cascade)
  transactionId String @unique

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model FavoriteBuyer { 
  id String @id @default(uuid())

  // BelongsTo Buyer
  buyer Buyer @relation(fields: [buyerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buyerId String

  // BelongsTo Menu 
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId String

  // 1 buyer hanya bisa favorite 1 menu 1x
  @@unique([buyerId, menuId])

}

model Request { 
  id String @id @default(uuid())
  name String
  vendor_name String
  location Location
  open_hour String
  close_hour String
  status Status_Request @default(Pending)
  email String? @unique
  phone String @unique
  document String
  proposal String
  photo String
  delivery_status Boolean @default(true)
  message String?
  bank_account String
  bank_type Bank_Account
  deadline DateTime @default(dbgenerated("(NOW() + INTERVAL '10 days')"))

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Test{
  id String @id @default(uuid())
  name String
  price Int
  quantity Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}


