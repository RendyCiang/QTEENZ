generator client {
  provider        = "prisma-client-js"
  // Allows prisma to use multiple schema files
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Admin
  Seller
  Buyer
}

enum Gender {
  Male
  Female
}

enum Status_payment {
  Pending 
  Accepted
  Refunded
  Expired
}

enum Status_Order {
  Pending
  Accepted 
  Declined
}

enum Status_Pickup {
  Cooking 
  Ready
  Picked
}

enum Location {
  Kantin_Payung
  Kantin_Basement
  Kantin_Lt5
}

enum Status_Open { 
  Open
  Close
}

model User {
  id String @id @default(uuid())
  email String? @unique
  password String
  role Role
  photo String?
  phone String @unique


  // HasOne 
  vendor Vendor?
  buyer Buyer?
  admin Admin?
}


model Admin {
  id String @id @default(uuid())
  name String
  binusian_id String @unique

  // FK ke User (BelongsTo User)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

}

model Buyer{
  id String @id @default(uuid())
  first_name String
  last_name String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  // HasMany Order
  order Order[]

  // HasMany FavoriteBuyer
  favoriteBuyer FavoriteBuyer[]
}

model Vendor {
  id String @id @default(uuid())
  name String 
  location Location 
  rating Float
  open_hour String
  close_hour String
  status Status_Open @default(Open)
  bank_account String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  
   // HasMany Menu (one Shop, Many menu)
  menu Menu[]
}



model Menu{
  id String @id @default(uuid())
  name String
  price Int
  description String
  stock Int
  photo String


  // BelongsTo Shop
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId String


  // BelongsTo Category
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  // HasMany Order
  order Order[]

  // HasMany FavoriteBuyer
  favoriteBuyer FavoriteBuyer[]
}

model Category{
  id String @id @default(uuid())
  name String

  // HasMany Food
  menu Menu[]
}


model Order{
  id String @id @default(uuid())
  total_menu Int
  status Status_Order @default(Pending)
  time DateTime

  // BelongsTo User
  buyer Buyer @relation(fields: [buyerId], references: [id], onDelete: Restrict,  onUpdate: Cascade)
  buyerId String

  // BelongsTo Menu
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Restrict,  onUpdate: Cascade)
  menuId String

  // HasOne Transaction 
  transaction Transaction?
}

model Transaction {
  id String @id 
  status_payment Status_payment @default(Pending)
  total_price Int
  date DateTime
  status_pickup Status_Pickup @default(Cooking)

  // BelongsTo Order
  order Order @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  orderId String @unique

  // HasOne Review
  review Review? 
}

model Review {
  id String @id 
  rating Int
  description String
  date DateTime

  // BelongsTo Transaction 
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  transactionId String @unique
}

model FavoriteBuyer { 
  id String @id @default(uuid())

  // BelongsTo Buyer
  buyer Buyer @relation(fields: [buyerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buyerId String

  // BelongsTo Menu 
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId String

  // 1 buyer hanya bisa favorite 1 menu 1x
  @@unique([buyerId, menuId])
}